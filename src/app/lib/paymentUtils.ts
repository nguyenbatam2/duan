// Payment Error Handling Utilities

export interface PaymentError {
  code: string;
  message: string;
  details?: any;
}

export const handlePaymentError = (error: PaymentError): string => {
  switch (error.code) {
    case 'INSUFFICIENT_STOCK':
      return 'S·∫£n ph·∫©m kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng trong kho';
    
    case 'INVALID_COUPON':
      return 'M√£ gi·∫£m gi√° kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n';
    
    case 'PAYMENT_FAILED':
      return 'Thanh to√°n th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i';
    
    case 'ORDER_NOT_FOUND':
      return 'Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng';
    
    case 'PAYMENT_ALREADY_PROCESSED':
      return 'ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c thanh to√°n';
    
    case 'INVALID_PAYMENT_METHOD':
      return 'Ph∆∞∆°ng th·ª©c thanh to√°n kh√¥ng h·ª£p l·ªá';
    
    case 'AMOUNT_MISMATCH':
      return 'S·ªë ti·ªÅn thanh to√°n kh√¥ng kh·ªõp v·ªõi ƒë∆°n h√†ng';
    
    case 'VNPAY_ERROR':
      return error.details?.message || 'L·ªói t·ª´ c·ªïng thanh to√°n VNPay';
    
    case 'NETWORK_ERROR':
      return 'L·ªói k·∫øt n·ªëi m·∫°ng. Vui l√≤ng ki·ªÉm tra l·∫°i';
    
    case 'TIMEOUT_ERROR':
      return 'H·∫øt th·ªùi gian x·ª≠ l√Ω. Vui l√≤ng th·ª≠ l·∫°i';
    
    default:
      return 'C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau';
  }
};

export const getPaymentStatusLabel = (status: string): string => {
  switch (status) {
    case 'pending':
      return 'Ch·ªù x√°c nh·∫≠n';
    case 'processing':
      return 'ƒêang x·ª≠ l√Ω thanh to√°n';
    case 'paid':
      return 'ƒê√£ thanh to√°n';
    case 'payment_failed':
      return 'Thanh to√°n th·∫•t b·∫°i';
    case 'confirmed':
      return 'ƒê√£ x√°c nh·∫≠n';
    case 'shipped':
      return 'ƒê√£ g·ª≠i h√†ng';
    case 'delivered':
      return 'ƒê√£ giao h√†ng';
    case 'cancelled':
      return 'ƒê√£ h·ªßy';
    default:
      return 'Kh√¥ng x√°c ƒë·ªãnh';
  }
};

export const getPaymentStatusColor = (status: string): string => {
  switch (status) {
    case 'pending':
      return 'text-yellow-600 bg-yellow-100';
    case 'processing':
      return 'text-blue-600 bg-blue-100';
    case 'paid':
      return 'text-green-600 bg-green-100';
    case 'payment_failed':
      return 'text-red-600 bg-red-100';
    case 'confirmed':
      return 'text-blue-600 bg-blue-100';
    case 'shipped':
      return 'text-purple-600 bg-purple-100';
    case 'delivered':
      return 'text-green-600 bg-green-100';
    case 'cancelled':
      return 'text-gray-600 bg-gray-100';
    default:
      return 'text-gray-600 bg-gray-100';
  }
};

export const formatCurrency = (amount: number): string => {
  return new Intl.NumberFormat('vi-VN', {
    style: 'currency',
    currency: 'VND'
  }).format(amount);
};

export const validatePaymentData = (data: any): boolean => {
  const requiredFields = ['items', 'name', 'phone', 'address', 'email', 'payment_method', 'total'];
  
  for (const field of requiredFields) {
    if (!data[field]) {
      return false;
    }
  }
  
  // Validate items
  if (!Array.isArray(data.items) || data.items.length === 0) {
    return false;
  }
  
  // Validate total amount
  if (typeof data.total !== 'number' || data.total <= 0) {
    return false;
  }
  
  return true;
};

export const getPaymentMethodInfo = (method: string) => {
  const methods = {
    cod: {
      label: 'Thanh to√°n khi nh·∫≠n h√†ng',
      description: 'Thanh to√°n b·∫±ng ti·ªÅn m·∫∑t khi nh·∫≠n h√†ng',
      icon: 'üíµ',
      color: 'green'
    },
    online_payment: {
      label: 'Thanh to√°n online (VNPay)',
      description: 'Thanh to√°n qua c·ªïng VNPay an to√†n',
      icon: 'üí≥',
      color: 'blue'
    }
  };
  
  return methods[method as keyof typeof methods] || methods.cod;
};
